
	Description of bug 	

	
Created By: Shmuel Ur 06/15/2004 02:50 AM
	

	

ID: 310725106

ID: 029667722

SOFTWARE TESTING COURSE

THE BUG PROJECT

 

1. THE  INFORMAL STORY

            After 6 month of testing he found out that he synchronized the accesses for read and for write to the Allocation Vector, but didnt synchronized between them. There was a not synchronized GAP in block allocation between finding index of free block and marking the block as allocated. The programmer corrected the mistake and customers were happy, until more bugs were found

 

2. THE FORMAL STORY

 

     The program performs management of allocated and deallocated blocks, by using Allocation Vector/BitVector/Bitmap, in which i-th entry indicates the status of i-th block.

     The bug is in that when block is allocated, first free block index found and then the free block is marked as allocated, and this two actions are not synchronized between them, therefore there is a synchronization GAP between this two functions, in which anything can be done.

     The BUG PATTERN is weak-reality-two-stage-access.

     Lines of the bug are: File TestThread1.java lines 48-50.

 

3. USAGE

            In the java program the class Test got the main method, which gets the following parameters as input from command-line:

1. Output file name.

2. Concurrency parameter which can be:

    little => Allocation Vector size: 20000 entries.

                      Thread1, number of accesses: 1000 allocations and deallocations.

                      Thread2, number of accesses: 1000 allocations and deallocations.

                      (In this case the run is ~99% correct)

 

    average => Allocation Vector size: 10000 entries.

                           Thread1, number of accesses: 2000 allocations and deallocations.

                           Thread2, number of accesses: 2000 allocations and deallocations.

                        (In this case the run is ~95% correct)

    lot => Allocation Vector size: 5000 entries.

                   Thread1, number of accesses: 5000 allocations and deallocations.

                   Thread2, number of accesses: 5000 allocations and deallocations.

                   (In this case the run is ~70% correct)

 

 

4. DICTIONARY OF OUTPUT TUPLES

            Available output tuples are the following ones:

 

1. <Test, Thread1 tried to allocate block which is allocated, weak-reality (Two stage access)>

 

2. <Test, Thread1 tried to free block which is free, weak-reality (Two stage access)> 

 

3. <Test, Thread2 tried to allocate block which is allocated, weak-reality (Two stage access)>

 

4. <Test, Thread2 tried to free block which is free, weak-reality (Two stage access)>

 

5. <Test, correct-run, none>

-----------------------------------------------------------------------------------------------------------
